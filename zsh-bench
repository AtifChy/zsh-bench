#!/usr/bin/env zsh

'builtin' 'emulate' '-L' 'zsh' '-o' 'no_aliases' '-o' 'err_return' || 'builtin' 'exit'
setopt no_unset extended_glob typeset_silent no_multi_byte \
       prompt_percent no_prompt_subst warn_create_global pipe_fail

() {

if [[ ${ZSH_VERSION-} != (5.<8->*|<6->.*) ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: zsh >= 5.8 is required to execute this script"
  return 1
fi

local IFS=$' \t\n\C-@'
local NULLCMD=cat

local -r self_dir=${ZSH_SCRIPT:A:h}

zmodload zsh/zutil

local -a help
local -a keep
local -a drop_caches
local -a iters=(--iters 16)
local -a git=(--git yes)
zparseopts -D -K -F --          \
  {h,-help}=help                \
  {k,-keep}=keep                \
  {c,-drop-caches}:=drop_caches \
  {i,-iters}:=iters             \
  {g,-git}:=git

if (( $#help )); then
  print -r -- "usage: ${ZSH_SCRIPT:t} [OPTION].. [CONFIG].."
  print -r --
  print -r -- 'OPTIONS'
  print -r -- '  -h,--help'
  print -r -- '  -k,--keep'
  print -r -- '  -i,--iters <NUM> [default=16]'
  print -r -- '  -g,--git <yes|no|empty> [default=yes]'
  print -r -- '  -c,--drop-caches <1|2|3>'
  return
fi

if [[ $iters[2] != <1-> ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: not a positive integer: ${(q-)iters[2]}"
  return 1
fi

if [[ $git[2] != (yes|no|empty) ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: invalid value of --git: ${(q-)git[2]}"
  return 1
fi

if [[ $#drop_caches -ne 0 && $drop_caches[2] != <1-3> ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: invalid value of --drop-caches: ${(q-)drop_caches[2]}"
  return 1
fi

if (( ARGC )); then
  if (( $#keep )); then
    print -ru2 -- "${ZSH_SCRIPT:t}: ${keep[1]} is incompatible with positional arguments"
    return 1
  fi

  () {
    local cfg
    for cfg; do
      if [[ ! -e $self_dir/configs/$cfg ]]; then
        print -ru2 -- "${ZSH_SCRIPT:t}: directory does not exist: $self_dir/configs/$cfg"
        return 1
      fi
    done
  } "$@"

  () {
    local cmd
    for cmd in docker tar; do
      if [[ ! -v commands[$cmd] ]]; then
        print -ru2 -- "${ZSH_SCRIPT:t}: command not found: ${(q-)cmd}"
        return 1
      fi
    done
  }

  local -r img=ubuntu:impish

  function docker-run() {
    command docker run -e LC_ALL=C.UTF-8 --rm -i ${drop_caches:+--privileged} $img sh -c -- "$@"
  }

  if ! docker-run true; then
    print -ru2 -- "${ZSH_SCRIPT:t}: cannot run docker; try sudo"
    return 1
  fi

  print -r -- "==> starting $img in docker ..."

  local args=($iters $git $drop_caches -- $@)
  local cmd=(
    'mkdir ~/zsh-bench'
    'cd ~/zsh-bench'
    'tar -xmz'
    'exec ./internal/docker-bench '${(j: :)${(@qqq)args}})
  (
    cd -q -- ${self_dir}
    command tar -czf - -- ^.git
  ) | docker-run ${(j: && :)cmd}
  return
fi

if (( $#drop_caches )); then
  if [[ ! -e /proc/sys/vm/drop_caches ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: --drop-caches works only on Linux"
    return 1
  elif [[ ! -v commands[sync] ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: command not found: sync"
  elif [[ -w /proc/sys/vm/drop_caches ]]; then
    function maybe-drop-caches() {
      sync
      /proc/sys/vm/drop_caches <<<$drop_caches[2]
    }
  elif [[ ! -v commands[sudo] ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: command not found: sudo"
  elif [[ ! -v commands[tee] ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: command not found: tee"
  else
    function maybe-drop-caches() {
      sync
      sudo tee /proc/sys/vm/drop_caches <<<$drop_caches[2] >/dev/null
    }
  fi
  maybe-drop-caches
else
  function maybe-drop-caches() { }
fi

zmodload zsh/datetime zsh/zselect

local -r stats=(
  creates_tty
  has_compsys
  has_syntax_highlighting
  has_autosuggestions
  has_git_prompt
  first_prompt_lag_ms
  first_command_lag_ms
  command_lag_ms
  input_lag_ms
  exit_time_ms)

local -- $stats
unset -- $stats

() {
  local cmd
  for cmd in cat cp git ln mkdir mkfifo mktemp rm script sleep touch zsh; do
    if [[ ! -v commands[$cmd] ]]; then
      print -ru2 -- "${ZSH_SCRIPT:t}: command not found: ${(q-)cmd}"
      return 1
    fi
  done
}

local script_version
if script_version=$(LC_ALL=C script -V 2>/dev/null) &&
   [[ $script_version == 'script from util-linux'* ]]; then
  local -ir bsd_script=0
else
  local -ir bsd_script=1
fi

function error() {
  local -i ret=$?
  print -Pru2 -- '%F{2}'${${ZSH_SCRIPT:t}//\%/%%}'%f: %F{1}fatal error%f'
  print -Pru2 -- '%F{3}--- stack trace (most recent call first) ---%f'
  print -lru2 -- "${funcfiletrace[@]}"
  print -Pru2 -- '%F{3}--- end of stack trace ---%f'
  return $(( ret ? ret : 1 ))
}
functions -Ms error

unset _zb_tmpdir

if (( ! $#keep )); then
  function cleanup() {
    if [[ $1 != EXIT ]]; then
      print -ru2 -- "${ZSH_SCRIPT:t}: SIG$1: cleaning up..."
    fi
    if [[ -n ${_zb_tmpdir-} ]]; then
      local -i delay=1
      cd -q -- /
      repeat 5; do
        command rm -rf -- $_zb_tmpdir 2>/dev/null || true
        [[ -e $_zb_tmpdir ]] || break
        (( delay *= 2 ))
      done
    fi
    [[ $1 == EXIT ]] && exit
    exit $((127 + ${signals[(Ie)$1]}))
  }

  local sig trapped=(${${(A)=:-INT TERM HUP EXIT}:*signals})
  for sig in $trapped; do
    trap "trap - $trapped; cleanup $sig" $sig
  done
  unset sig trapped
fi

typeset -g _zb_tmpdir=$(command mktemp -d ${TMPDIR:-/tmp}/zsh-bench-XXXXXXXXXX)
cd -q -- $_zb_tmpdir

command mkdir bin
command ln -s -- $commands[zsh] bin/-zsh

local -r zsh_version_file=$_zb_tmpdir/zsh_version
local -r info_file=$_zb_tmpdir/info
local -r fifo_file=$_zb_tmpdir/fifo
local -r out_file=$_zb_tmpdir/out
local -r timing_file=$_zb_tmpdir/timing
local -r merged_file=$_zb_tmpdir/merged

local -r prefix=ZB${(l:5::0:)RANDOM}-
local -r msg=${(qqq)prefix}${(qqq):-msg}
local -r cwd=${prefix}cwd
local -r host=${prefix}host
local -r git_branch=${prefix}branch
local -r src=./s

local -r prompt_pat="(${(b)cwd}|${(b)host})"

local -r bench_input_file=$self_dir/internal/-zb-benchmark-input
local -r bench_prompt_file=$self_dir/internal/-zb-benchmark-prompt

local -ri bench_input_iters=2
local -r bench_prompt_max_iters=1000

local bench_input_buf=' \abc'
repeat 5 bench_input_buf+=$bench_input_buf
bench_input_buf+="'"
local -r bench_input_buf

command mkfifo -- $fifo_file
command mkdir -- $cwd
cd -q -- $cwd

() {
  local -a info_bits=(
      '"${(qqq)TERM-}"'
      '"${+functions[compinit]}${+functions[compdef]}"'
      '"${+_ZSH_AUTOSUGGEST_BIND_COUNTS}"'
      '"${+ZSH_HIGHLIGHT_VERSION}${+FAST_HIGHLIGHT_VERSION}"')

  print -r  -- '"builtin" "print" '$msg
  print -r  -- '"builtin" "[" "$?" "-eq" "0" "]" || "builtin" "exit"'
  print -rn -- '"builtin" "autoload" "-Uz" "--" '${(qqq)bench_input_file}
  print -rn -- ' && "builtin" "autoload" "-Uz" "--" '${(qqq)bench_prompt_file}
  print -rn -- ' && "builtin" "print" "-rn" "--" '$info_bits' >| '${(qqq)info_file}
  print -rn -- ' && "builtin" "typeset" "-gr" _zb_benchmark_prompt_output_file='${(qqq)info_file}
  print -rn -- ' && "builtin" "typeset" "-gir" _zb_benchmark_prompt_max_iters='${(qqq)bench_prompt_max_iters}
  print -rn -- " && ${(qqq)bench_input_file:t} ${(qqq)info_file} ${(qqq)fifo_file} ${(qqq)bench_input_buf} ${(qqq)bench_input_iters}"
  print -r  -- ' || "builtin" "exit"'
} >$src

unset -m 'GIT_*|TMUX*' || true

() {
  case $git[2] in
    yes)
      print -rC1 -- {1..10}/{1..10}/{1..10}         | xargs mkdir -p --
      print -rC1 -- {1..10}/{1..10}/{1..10}/{1..10} | xargs touch --
    ;;
    no) return;;
    empty) ;;
    *) return 'error()';;
  esac

  local -x GIT_CONFIG_NOSYSTEM=1 HOME=$_zb_tmpdir
  local err=$_zb_tmpdir/git.log
  {
    command git init
    command git config user.name "Your Name"
    command git config user.email "you@example.com"
    if [[ $git[2] == yes ]]; then
      command sleep 1
      command git add .
      command git commit --quiet --allow-empty --allow-empty-message --no-gpg-sign -m ''
      command git status
    fi
    command git checkout -b $git_branch
  } >/dev/null 2>$err || {
    <$err >&2
    return 1
  }
}

if (( LINES )); then
  local -ri lines=LINES
else
  local -ri lines=20
fi
if (( COLUMNS )); then
  local -ri columns=COLUMNS
else
  local -ri columns=80
fi

function with-env() {
  unsetopt xtrace
  HOST=${host} TERM=xterm-256color LINES=$lines COLUMNS=$columns "$@"
}

if (( bsd_script )); then
  function script() {
    with-env command script -rqt0 -- "${(@Q)@}" >/dev/null
  }
else
  function script() {
    if (( ARGC == 1 )); then
      with-env command script -fqe -- "$1" >/dev/null
    else
      with-env command script -fqec "${(j: :)@:2}" -- "$1" >/dev/null
    fi
  }
fi

() {
  local out
  out=$(with-env command zsh -lic '"builtin" "exit"' 2>&1 </dev/null || true)
  if [[ $out == *${~prompt_pat}* ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: zsh is printing hostname or the last part of the current directory"
    print -ru2 -- $out
    return 1
  fi
}

() {
  local cmd='"builtin" "printf" "%s\n" "${ZSH_VERSION-}" >'${(qqq)zsh_version_file}
  if ! script /dev/null ${(qqq)commands[zsh]} '"-c"' ${(qqq)cmd} </dev/null ||
     [[ ! -e $zsh_version_file ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: either 'script' or 'zsh' is broken"
    return 1
  fi

  local zsh_version
  zsh_version=$(<$zsh_version_file)
  if [[ $zsh_version != (5.<8->*|<6->.*) ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: zsh >= 5.8 is required"
    return 1
  fi
}

{
  print -rn -- ' "builtin" ":" >>'${(qqq)fifo_file}
  print -rn -- ' && "builtin" ":" <'${(qqq)fifo_file}
  print -r  -- ' || "builtin" "exit"'
  : <$fifo_file
  : >>$fifo_file
  command sleep 1
  print -r -- ' "builtin" "exit" "0"'
} | script /dev/null ${(qqq)commands[zsh]} '"-li"'

repeat $iters[2]; do
  maybe-drop-caches

  {
    print -r  -- ' "builtin" "." '${(qqq)src}
    : <$fifo_file
    : >>$fifo_file
    
    repeat $bench_input_iters; do
      print -rn -- $bench_input_buf[1,-2]
      : <$fifo_file
      : >>$fifo_file
      print -rn -- $bench_input_buf[-1]
      : <$fifo_file
      : >>$fifo_file
    done

    print -r  -- ${(pl:$bench_prompt_max_iters::\n:):-}
  } | {
    if (( bsd_script )); then
      script $merged_file $commands[zsh] -l
    else
      script /dev/null 'SHELL="-zsh"' PATH=${(qqq)_zb_tmpdir}/bin:${(qqq)PATH} \
        '"command"' '"script"' -fqet${(qqq)timing_file} ${(qqq)out_file}
    fi
  }

  local -a timing
  timing=($(<$timing_file))
  (( $#timing % 2 == 0 )) || return 'error()'

  local out
  out=$(<$out_file)
  [[ $out == *$'\n'*$'\n'* ]] || return 'error()'
  out=${${out#*$'\n'}%$'\n'*}

  () {
    local -i p
    local dt dp
    for dt dp in $timing; do
      [[ $dt == <->(|.<->) ]] || return 'error()'
      [[ $dp == <1->       ]] || return 'error()'
      (( p += dp ))
    done
    (( p == $#out )) || return 'error()'
  }

  function timeat() {
    [[ ARGC -eq 1 && $1 == <1-> ]] || return 'error()'
    local -ir needle=$1
    local -F t dt
    local -i p dp
    for dt dp in $timing; do
      (( t += dt, p += dp ))
      if (( p >= needle )); then
        typeset -g REPLY=$((1e3 * t))
        return 0
      fi
    done
    return 1
  }

  function timeof() {
    [[ ARGC -eq 1 && -n $1 ]] || return 'error()'
    local -r pat=$1
    local suf=${out#*${~pat}}
    local -i pos=$(($#out - $#suf))
    (( pos )) || return
    timeat $pos
  }

  () {
    local e=$'\e' a=$'\a'
    local begin=$e'(\](0|1|2|7|1337);|k)'
    local end='('$e'\\|'$a')'
    local mid='[^'$e$a']#'
    local pat=${begin}${mid}${end}
    local MATCH MBEGIN MEND
    out=${(S)out//(#m)$~pat/${MATCH//?/X}}
  }

  local REPLY

  if ! timeof $prompt_pat; then
    print -ru2 -- "${ZSH_SCRIPT:t}: cannot find prompt; make sure it contains hostname or the last part of the current directory"
    return 1
  fi
  if (( ! $+first_prompt_lag_ms || REPLY < first_prompt_lag_ms )); then
    local -F3 first_prompt_lag_ms=REPLY
  fi

  if ! timeof ${(b)${(Q)msg}}; then
    print -ru2 -- "${ZSH_SCRIPT:t}: cannot find the output of the first command"
    return 1
  fi
  if (( ! $+first_command_lag_ms || REPLY < first_command_lag_ms )); then
    local -F3 first_command_lag_ms=REPLY
  fi

  local -F first_cmd=REPLY
  if timeof ${(b)git_branch} && (( REPLY <= first_cmd )); then
    typeset -i has_git_prompt=1
  else
    typeset -i has_git_prompt=${has_git_prompt-0}
  fi

  if [[ ! -e $info_file ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: cannot find the info file"
    return 1
  fi

  local info
  info=$(<$info_file)
  command rm -- $info_file
  info=(${(@Q)${(z)info}})
  (( $#info == 7 )) || return 'error()'

  if [[ $info[1] == (screen|tmux)* ]]; then
    local -i creates_tty=${creates_tty-1}
  else
    local -i creates_tty=0
  fi

  [[ $info[2] == <0-1><0-1> ]] || return 'error()'
  local -i has_compsys=$(( ${has_compsys-1} && info[2] == 11 ))

  [[ $info[3] == <0-1> ]] || return 'error()'
  local -i has_autosuggestions=$(( ${has_autosuggestions-1} && info[3] ))

  [[ $info[4] == <0-1><0-1> ]] || return 'error()'
  local -i has_syntax_highlighting=$(( ${has_syntax_highlighting-1} && info[4] ))

  local -i i
  for i in 5 6; do
    [[ $info[i] == <->.<-> ]] || return 'error()'
    if (( ! $+input_lag_ms || info[i] < input_lag_ms )); then
      local -F3 input_lag_ms='info[i]'
    fi
  done

  [[ $info[7] == <->.<-> ]] || return 'error()'
  if (( ! $+command_lag_ms || info[7] < command_lag_ms )); then
    local -F3 command_lag_ms='info[7]'
  fi

  maybe-drop-caches

  local -F start=EPOCHREALTIME
  command zsh -lic '"builtin" "exit"' </dev/null &>/dev/null || true
  local -F took_ms='1e3 * (EPOCHREALTIME - start)'
  if (( ! $+exit_time_ms || took_ms < exit_time_ms )); then
    local -F3 exit_time_ms=took_ms
  fi

  zselect -t 10 || true
done

() {
  local name
  for name in $stats; do
    [[ ! -v $name ]] || print -r -- "$name=${(q-)${(P)name}}"
  done
}

} "$@"
