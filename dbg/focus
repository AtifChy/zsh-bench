#!/usr/bin/env zsh

emulate -L zsh -o err_return
setopt no_unset typeset_silent no_multi_byte warn_create_global pipe_fail

() {

zmodload zsh/zutil

local -x LC_ALL=C

local -a help timing_file data_file timestamp
zparseopts -D -K -F --     \
  {h,-help}=help           \
  {t,-timing}:=timing_file \
  {d,-data}:=data_file     \
  {T,-timestamp}:=timestamp

if (( $#help )); then
  print -r -- "usage: ${ZSH_SCRIPT:t} [OPTION].."
  print -r --
  print -r -- 'OPTIONS'
  print -r -- '  -h,--help'
  print -r -- '  -t,--timing <timing-file>'
  print -r -- '  -d,--data <data-file>'
  print -r -- '  -T,--timestamp <milliseconds>'
  return
fi

if (( ARGC )); then
  print -ru2 -- "${ZSH_SCRIPT:t}: unexpected positional argument(s)"
  return 1
fi

if (( ! $#timing_file )); then
  print -ru2 -- "${ZSH_SCRIPT:t}: missing required flag: --timing"
  return 1
fi
if (( ! $#data_file )); then
  print -ru2 -- "${ZSH_SCRIPT:t}: missing required flag: --data"
  return 1
fi
if (( ! $#timestamp )); then
  print -ru2 -- "${ZSH_SCRIPT:t}: missing required flag: --timestamp"
  return 1
fi
if [[ $timestamp[2] != <->.[0-9][0-9][0-9] ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: invalid timestamp format: ${(q-)timestamp[2]}"
  return 1
fi
if [[ ! -t 0 || ! -t 1 || ! -t 2 ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: all standard file descriptors must be TTY"
  return 1
fi
if [[ ! -v commands[stty] ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: command not found: stty"
fi

unset _zb_stty
typeset -g _zb_stty
_zb_stty=$(command stty -g)

function cleanup() {
  local key
  while true; do
    [[ -t 2 ]] || read -t0 -k key || break
  done 2>/dev/null
  command stty $_zb_stty
  [[ $1 == EXIT ]] && exit
  exit $((127 + ${signals[(Ie)$1]}))
}

local sig trapped=(${${(A)=:-INT TERM HUP EXIT}:*signals})
for sig in $trapped; do
  trap "trap - $trapped; cleanup $sig" $sig
done
unset sig trapped

local -F t
local -i n pref=1
local data timing dt dn REPLY
data=${${"$(<$data_file[2]; print -n x)"%x}#*$'\n'}
timing=($(<$timing_file[2]))

if (( $#timing % 2 != 0 )); then
  print -ru2 -- "${ZSH_SCRIPT:t}: malformed timing file"
  return 1
fi

for dt dn in $timing; do
  if [[ $dt != <->(|.<->) || $dn != <1-> ]]; then
    print -ru2 -- "${ZSH_SCRIPT:t}: malformed timing file"
    return 1
  fi
  if (( $#data < n + dn )); then
    print -ru2 -- "${ZSH_SCRIPT:t}: malformed timing or data file"
    return 1
  fi
  (( t += dt, 1 ))
  if (( pref && 1e3 * t > timestamp[2] - 0.001 )); then
    IFS= read -rs
    pref=0
  fi
  print -rn -- $data[n+1,n+dn]
  if (( 1e3 * t >= timestamp[2] + 0.001 )); then
    IFS= read -rs
    break
  fi
  (( n += dn ))
done

} "$@"
