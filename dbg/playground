#!/usr/bin/env zsh

'builtin' 'emulate' '-L' 'zsh' '-o' 'no_aliases' '-o' 'err_return' || 'builtin' 'exit'
setopt no_unset extended_glob typeset_silent no_multi_byte \
       prompt_percent no_prompt_subst warn_create_global pipe_fail

() {

if [[ ${ZSH_VERSION-} != (5.<8->*|<6->.*) ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: zsh >= 5.8 is required to execute this script"
  return 1
fi

zmodload zsh/zutil zsh/system zsh/zselect

local -a help privileged
zparseopts -D -K -F -- {h,-help}=help {p,-privileged}=privileged

if (( $#help )); then
  print -r -- "usage: ${ZSH_SCRIPT:t} [OPTION].. CONFIG"
  print -r --
  print -r -- 'OPTIONS'
  print -r -- '  -h,--help'
  return
fi

if (( ARGC != 1 )); then
  print -ru2 -- "${ZSH_SCRIPT:t}: exactly one positional argument is required"
  return 1
fi

local -r cfg=$1

() {
  local cmd
  for cmd in docker tar unbuffer base64 stty cat tr; do
    if [[ ! -v commands[$cmd] ]]; then
      print -ru2 -- "${ZSH_SCRIPT:t}: command not found: ${(q-)cmd}"
      return 1
    fi
  done
}

if [[ ! -t 0 || ! -t 1 || ! -t 2 ]]; then
  print -ru2 -- "${ZSH_SCRIPT:t}: all standard file descriptors must be TTY"
  return 1
fi

local -r img=ubuntu:impish
local -r docker=(docker run -e TERM -e COLORTERM -it --rm ${privileged:+--privileged} $img)

if ! command $docker sh -c true; then
  print -ru2 -- "${ZSH_SCRIPT:t}: cannot run docker; try with sudo?"
  return 1
fi

local -a self
() {
  local s
  s=$(cd -q -- ${ZSH_SCRIPT:h:h} &&
        command tar -czf - -- ^.git | command base64 | command tr -d '\n')
  while (( $#s )); do
    self+=(${s[1,63]})
    s[1,63]=
  done
}

local stty
stty=$(command stty -g)

print -r -- "==> starting $img in docker ..."

{
  stty -icanon -echo -icrnl

  unsetopt pipe_fail
  (
    print -rC1 -- $sysparams[pid]
    (
      print -rC1 -- $sysparams[pid]
      while true; do zselect -t 100 || true; done
    ) || true
    while (( $#self )); do
      zselect -t 10 || true
      print -rC1 -- "${(@)self[1,16]}"
      self[1,16]=()
    done
    trap "print -n '\\003'; return" INT
    while true; do
      () { cat }
    done
  ) | {
    trap '' INT
    local ppid pid ret
    IFS= read -r ppid
    IFS= read -r pid
    local args=(1 $cfg '~/zsh-bench/internal/create-repo ~/repo' 'cd ~/repo' 'exec zsh -l')
    local cmd=(
      'mkdir ~/zsh-bench'
      'cd ~/zsh-bench'
      'stty -echo'
      'echo ready'
      'head -n '$#self' | base64 -d | tar -xzm'
      'stty echo'
      '~/zsh-bench/internal/install-deps command-not-found'
      'exec ~/zsh-bench/internal/install-config '${(j: :)${(@qqq)args}})
    (
      trap '' INT
      setopt pipe_fail
      unbuffer -p $docker sh -c -- ${(j: && :)cmd} | {
        trap '' INT
        local REPLY
        while true; do
          IFS= read -r
          [[ $REPLY == ready(|$'\r') ]] && break
        done
        kill -- $pid 2>/dev/null
        command cat
      }
    ) || ret=$?
    kill -- $ppid 2>/dev/null
    return ret
  }
} always {
  local key
  while true; do
    read -t0 -k key || break
  done
  command stty $stty
}

} "$@"
